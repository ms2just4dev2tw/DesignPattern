/**
 * <h3>代理模式</h3>
 * 代理控制着对于原对象的访问， 并允许在将请求提交给对象前后进行一些处理，典型的应用: 拦截器
 * 
 * <h3>代理技术</h3>
 * 代理技术主要分为两类
 * <ul>
 * 		<li>静态代理</li>
 * 		<li>动态代理 <p>
 * 		<ul>
 * 			<li>JDK 动态代理<p>
 * 			必须提供一个接口，代理对象和真实对象通用的接口</li>
 * 			<li>CGLIB 动态代理<p>
 * 			非抽象类就行，其原理是代理对象是真实对象的子类</li>
 * 			<li>Javassist 动态代理<p></li>
 * 			<li>ASM 动态代理<p></li>
 * 		</ul></li>
 * </ul>
 * 
 * <h3>代理的应用场景</h3>
 * 拦截器
 */
package org.gof.structural.proxy;
